import pandas as pd
import sqlalchemy

# Подключение к базе данных
engine = sqlalchemy.create_engine('postgresql://user:password@host:port/database')

# Чтение данных из таблиц
chat_messages = pd.read_sql_query("SELECT * FROM test.chat_messages", engine)
managers = pd.read_sql_query("SELECT * FROM test.managers", engine)
rops = pd.read_sql_query("SELECT * FROM test.rops", engine)

# Преобразование столбца created_at в формат datetime
chat_messages['created_at'] = pd.to_datetime(chat_messages['created_at'], unit='s')

# Создание флага первого сообщения в блоке
chat_messages['is_first_message'] = (chat_messages['type'] != chat_messages['type'].shift(1)) | (chat_messages['entity_id'] != chat_messages['entity_id'].shift(1))

# Фильтрация только первых сообщений в блоках
first_messages = chat_messages[chat_messages['is_first_message'] == True]

# Объединение данных о менеджерах и руководителях
first_messages = pd.merge(first_messages, managers, left_on='created_by', right_on='mop_id', how='left')
first_messages = pd.merge(first_messages, rops, left_on='rop_id', right_on='rop_id', how='left')

# Вычисление времени ответа менеджера
first_messages['response_time'] = first_messages.groupby('entity_id')['created_at'].shift(-1) - first_messages['created_at']

# Учет нерабочего времени
first_messages['response_time'] = first_messages.apply(lambda row: (row['response_time'].total_seconds() / 60) if (row['created_at'].hour >= 9 and row['created_at'].hour < 24) else 1, axis=1)

# Вычисление среднего времени ответа для каждого менеджера
average_response_time = first_messages.groupby(['name_mop', 'rop_name'])['response_time'].mean().reset_index()

# Вывод результата
print(average_response_time)
